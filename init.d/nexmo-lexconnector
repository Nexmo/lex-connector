#! /bin/bash
### BEGIN INIT INFO
# Provides:          nexmo-lexconnector
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Nexmo Lex connector
# Description:       See details in https://github.com/Nexmo/LexConnector/blob/master/README.md
### END INIT INFO


# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="Nexmo LEX connector"
NAME=nexmo-lexconnector
USER=lex
RUNTIME=/home/$USER/runtime
SCRIPT=server.py
REQUIREMENTS=requirements.txt
DIR_ENV=$RUNTIME/virtualenv
LOG_DIR=$RUNTIME/logs
LOG_FILE=$LOG_DIR/${NAME}.log
DAEMON=/usr/bin/daemon
PIDFILE=/var/run/nexmo/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
DAEMON_ARGS="--user $USER --name $NAME -D $RUNTIME -U python $RUNTIME/$SCRIPT -F $PIDFILE"

[ -x $DAEMON ] || exit 0

# load defaults, vars, lsb-functions
[ -r /etc/default/$NAME ]      && . /etc/default/$NAME
[ -r /lib/init/vars.sh ]       && . /lib/init/vars.sh
[ -r /lib/lsb/init-functions ] && . /lib/lsb/init-functions

prepare_env() {
    [[ ! -d $DIR_ENV ]] && {
        echo "Creating virtualenv"
        /usr/bin/virtualenv $DIR_ENV
    }
    source $DIR_ENV/bin/activate
    pip install -r $RUNTIME/$REQUIREMENTS  >> $LOG_FILE 2>&1
}

log_action() {
    echo -e "\n----- $(date "+%Y/%m/%d %H:%M:%S") - $1 -----" >> $LOG_FILE
}

# Return
#   0: started
#   1: already running
#   2: could not be started
do_start()
{
    # Prepare python environment
    prepare_env

    $DAEMON --running $DAEMON_ARGS  >> $LOG_FILE 2>&1 && return 1

    log_action "Start"
    $DAEMON $DAEMON_ARGS  >> $LOG_FILE 2>&1 || return 2
    sleep 1
    echo "Running with PID $([ -e $PIDFILE ] && cat $PIDFILE || echo -)" >> $LOG_FILE
}


# Return
#   0 stopped
#   1 already stopped
#   2 could not be stopped
#   other: a failure occurred
do_stop()
{
    $DAEMON --running $DAEMON_ARGS  >> $LOG_FILE 2>&1 || return 1
    
    log_action "Stop"
    $DAEMON --stop $DAEMON_ARGS  >> $LOG_FILE 2>&1 || return 2

	[ -f $PIDFILE ] && rm -f $PIDFILE
	return $RETVAL
}

[ -d $LOG_DIR ] || {
    mkdir -p $LOG_DIR
    chown $USER: $LOG_DIR
}

case $1 in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case $? in
		0|1) log_end_msg 0 ;;
		2)   log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case $? in
		0|1) log_end_msg 0 ;;
		2)   log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|reload|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case $? in
	  0|1)
		do_start
		case $? in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: ${SCRIPTNAME##*/} {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
